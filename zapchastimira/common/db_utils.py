from sqlalchemy import create_engine # функция create_engine используется для создания объекта подключения к базе данных.
from zapchastimira.common.settings import SQLiteSettings # класс используется для получения настроек базы данных, таких как строка подключения.
from sqlalchemy.orm import Session, sessionmaker # объект сессии, который используется для взаимодействия с базой данных, а sessionmaker — это фабрика для создания объектов сессии.


def get_sessionmaker() -> sessionmaker[Session]: # функция будет создавать и возвращать фабрику сессий для работы с базой данных.
	db_settings = SQLiteSettings() # автоматически загружаются настройки из переменных окружения или файла .env, включая строку подключения к базе данных (DSN).
	engine = create_engine(db_settings.dsn) # представляет собой соединение с базой данных и используется для выполнения операций с ней.
	return sessionmaker(bind=engine, autoflush=True, expire_on_commit=False)

"""
bind=engine: Указывает, что созданный объект сессии будет связан с ранее созданным объектом engine. Это означает, что все операции в этой сессии будут выполняться на указанной базе данных.

autoflush=True: Указывает, что изменения в объекте будут автоматически сбрасываться в базу данных перед выполнением запросов. Это помогает избежать ошибок при чтении данных после их изменения.

expire_on_commit=False: Указывает, что объекты не будут истекать (то есть не будут автоматически загружаться заново из базы данных) после коммита транзакции.

Это может быть полезно для повышения производительности, если вы хотите продолжать работать с измененными объектами после коммита."""


"""
Этот код включает в себя создание сессий для взаимодействия с базой данных и настройку подключения.
Cоздает функцию get_sessionmaker, которая настраивает и возвращает фабрику сессий для работы с базой данных SQLite.
Он использует Pydantic для управления настройками и SQLAlchemy для работы с базой данных.
Функция позволяет легко создавать новые сессии для выполнения операций CRUD (создание, чтение, обновление и удаление) в базе данных.

"""

def get_db():
    """
    Генератор для получения сессии базы данных.
    """
    db = get_sessionmaker()()  # Создаем новую сессию из фабрики.
    try:
        yield db  # Возвращаем сессию для использования в контексте.
    finally:
        db.close()  # Закрываем сессию после использования.
