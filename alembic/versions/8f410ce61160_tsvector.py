"""tsvector

Revision ID: 8f410ce61160
Revises: 78427d67883c
Create Date: 2025-01-25 10:12:46.514467

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f410ce61160'
down_revision: Union[str, None] = '78427d67883c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    op.add_column('parts', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True))
    
    op.execute("""
        CREATE OR REPLACE FUNCTION update_product_search_vector() RETURNS TRIGGER AS $$
        BEGIN
            NEW.search_vector = to_tsvector(
                'simple',
                COALESCE(NEW.name, '') || ' ' ||
                COALESCE(NEW.description, '') || ' ' ||
                COALESCE((SELECT name FROM product_category WHERE category_id = NEW.category_id), '') || ' ' ||
                COALESCE((SELECT c.name FROM categories c JOIN product_category s ON c.category_id = s.category_id WHERE s.category_id = NEW.category_id), '')
            );
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Создаем триггер, который вызывает функцию при вставке или обновлении
    op.execute("""
        CREATE TRIGGER products_search_vector_update
        BEFORE INSERT OR UPDATE ON products
        FOR EACH ROW EXECUTE FUNCTION update_product_search_vector();
    """)
    
    op.execute("""
        UPDATE parts
        SET search_vector = to_tsvector(
            'simple',
            COALESCE(name, '') || ' ' ||
            COALESCE(description, '') || ' ' ||
            COALESCE((SELECT name FROM product_category WHERE category_id = parts.category_id), '') || ' ' ||
            COALESCE((SELECT c.name FROM categories c JOIN product_category s ON c.category_id = s.category_id WHERE s.category_id = parts.category_id), '')
        );
    """)
    
    op.execute("""
        CREATE INDEX idx_parts_search_vector ON parts USING GIN (search_vector);
    """)
    op.alter_column('parts', 'search_vector', existing_type=postgresql.TSVECTOR(), nullable=False)
    
    # op.add_column('part_category', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=False))
    # op.add_column('product_category', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=False))
    # op.add_column('products', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('products', 'search_vector')
    # op.drop_column('product_category', 'search_vector')
    # op.drop_column('parts', 'search_vector')
    # op.drop_column('part_category', 'search_vector')
    # ### end Alembic commands ###
